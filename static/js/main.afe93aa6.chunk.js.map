{"version":3,"sources":["types/SearchField.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SearchField","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialFilter","filterReducer","filter","todos","initialState","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","preparedTodos","normalTodo","title","toLowerCase","includes","ALL","ACTIVE","completed","COMPLETED","length","className","map","id","classNames","onClick","currentActions","setTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","users","setUsers","loading","setLoading","useEffect","userId","finally","href","email","name","App","data","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afe93aa6.chunk.js","sourcesContent":["export enum SearchField {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = { type: 'filter/SET_FILTER_QUERY', payload: string };\ntype RemoveQueryAction = {\n  type: 'filter/SET_FILTER_REMOVE_QUERY'\n};\ntype SetFilterStatus = { type: 'filter/SET_FILTER_STATUS', payload: string };\n\ntype Action = SetQueryAction | RemoveQueryAction | SetFilterStatus;\n\nconst setQuery = (query: string): Action => ({\n  type: 'filter/SET_FILTER_QUERY',\n  payload: query,\n});\n\nconst removeQuery = (): Action => ({\n  type: 'filter/SET_FILTER_REMOVE_QUERY',\n});\n\nconst setStatus = (status: string): Action => ({\n  type: 'filter/SET_FILTER_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, removeQuery, setStatus };\n\ntype Filter = {\n  query: string;\n  status: string;\n};\n\nconst initialFilter: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (filter: Filter = initialFilter, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET_FILTER_QUERY':\n      return {\n        ...filter,\n        query: action.payload,\n      };\n\n    case 'filter/SET_FILTER_STATUS':\n      return {\n        ...filter,\n        status: action.payload,\n      };\n\n    case 'filter/SET_FILTER_REMOVE_QUERY':\n      return {\n        query: '',\n        status: filter.status,\n      };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = { type: 'todo/ADD', payload: Todo[] };\n\ntype Action = AddAction;\n\nconst addTodo = (todos: Todo[]): Action => ({\n  type: 'todo/ADD',\n  payload: todos,\n});\n\nexport const actions = { addTodo };\n\nconst initialState: Todo[] = [];\n\nconst todosReducer = (\n  todos: Todo[] = initialState,\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todo/ADD':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentActions } from '../../features/currentTodo';\nimport { SearchField } from '../../types/SearchField';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const setTodo = (todo: Todo) => dispatch(currentActions.setTodo(todo));\n\n  const preparedTodos = todos.filter(todo => {\n    const normalTodo = todo.title.toLowerCase().includes(query);\n\n    switch (status) {\n      case SearchField.ALL:\n        return normalTodo;\n      case SearchField.ACTIVE:\n        return normalTodo && !todo.completed;\n      case SearchField.COMPLETED:\n        return normalTodo && todo.completed;\n      default:\n        return todo;\n    }\n  });\n\n  return (\n    <>\n      {!todos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {todos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {preparedTodos.map(todo => (\n\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames(\n                      todo.completed ? 'has-text-success' : 'has-text-danger',\n                    )}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye-slash': currentTodo?.id === todo.id,\n                        'fa-eye': currentTodo?.id !== todo.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { SearchField } from '../../types/SearchField';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const setQuery = (value: string) => dispatch(filterActions.setQuery(value));\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const removeQuery = () => dispatch(filterActions.removeQuery());\n  const handleRemoveQuery = () => {\n    removeQuery();\n  };\n\n  const setStatus = (value: string) => dispatch(filterActions.setStatus(value));\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatus(event.target.value);\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelectChange}\n          >\n            <option value={SearchField.ALL}>All</option>\n            <option value={SearchField.ACTIVE}>Active</option>\n            <option value={SearchField.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleRemoveQuery}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { actions as currentActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const [users, setUsers] = useState<User | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const removeTodo = () => dispatch(currentActions.removeTodo());\n\n  useEffect(() => {\n    setLoading(true);\n    if (currentTodo) {\n      getUser(currentTodo?.userId)\n        .then(setUsers)\n        .finally(() => setLoading(false));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => removeTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              {users && (\n                <a href={`${users.email}`}>\n                  {users.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then(data => dispatch(todoActions.addTodo(data)))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading && (\n                <Loader />\n              )}\n\n              {!loading && !!todos.length && (\n                <TodoList />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}